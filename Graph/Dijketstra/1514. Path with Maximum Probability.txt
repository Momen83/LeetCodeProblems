class Solution {
public:
double dijk(int n,int st , int en , vector<vector<pair<int,double>>>&adj) {
    vector<double> cost(n + 9, 0.0);
    vector<bool>vis(n + 9 , false);
    cost[st] = 1.0;

    priority_queue<pair<double, int>> pq;
    pq.push({1.0, st});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();
        if (vis[u])continue;
        vis[u] = 1;
        for (auto child: adj[u]) {
            int v = child.first;
            double c = child.second;
            if (cost[u] * c >= cost[v]) {
                cost[v] = cost[u]  * c;
                pq.push({cost[v],v});
            }
        }

    }
    return cost[en];
}
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        vector<vector<pair<int,double>>>adj;
        adj = vector<vector<pair<int,double>>>(n + 1);
        for(int i = 0 ; i  < edges.size() ; i++ ){
            int u = edges[i][0];
            int v = edges[i][1];
            double c = succProb[i];
            adj[u].push_back({v,c});
            adj[v].push_back({u,c});
        }
        
        return dijk(n,start,end,adj);
    }
};