//Iterative
class Solution {
public:
    int dp[201][201];
    void  init()
{
    for (int i = 0; i < 201; ++i) {
        for (int j = 0; j < 201; ++j) {
           dp[i][j]=0;
        }
    }
}
   
    int minPathSum(vector<vector<int>>& grid) {
        init();
         dp[0][0]=grid[0][0];
    for (int i = 1; i < grid[0].size(); ++i) {
        dp[0][i]+=dp[0][i-1]+grid[0][i];
    }
    for (int i = 1; i < grid.size(); ++i) {
        dp[i][0]+=dp[i-1][0]+grid[i][0];
    }
    for (int i = 1; i < grid.size(); ++i) {
        for (int j = 1; j <grid[i].size() ; ++j) {
            dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i][j];
        }
    }
        return dp[grid.size()-1][grid[0].size()-1];
    }
};
/////////////////////////////////////////////////////

//recurisve
class Solution {
public:
    int dp[201][201];
    void  init()
{
    for (int i = 0; i < 201; ++i) {
        for (int j = 0; j < 201; ++j) {
           dp[i][j]=-1;
        }
    }
}
    bool valid(int i,int j,int n,int m)
  {
    return (i>=0 &&i<n &&j>=0 &&j<m);
  }
    int solve(int i,int j,vector<vector<int>>&grid)
{
    // cout<<i<<' '<<j<<'\n';
    if(i==grid.size() ||j==grid[0].size())return 1e9;
    if(i==grid.size()-1 &&j==grid[0].size()-1)return grid[i][j];
    int &res=dp[i][j];
    if(~res)return res;
    res=1e9;
    if(valid(i+1,j,grid.size(),grid[0].size()))res=min(res,solve(i+1,j,grid)+grid[i][j]);
    if(valid(i,j+1,grid.size(),grid[0].size()))res=min(res,solve(i,j+1,grid)+grid[i][j]);
    //cout<<op1<<" "<<op2<<'\n';
    return res;
}
    int minPathSum(vector<vector<int>>& grid) {
        init();
        return solve(0,0,grid);
    }
};
